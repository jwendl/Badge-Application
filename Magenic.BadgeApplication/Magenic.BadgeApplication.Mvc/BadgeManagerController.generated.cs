// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
#pragma warning disable 1591, 3008, 3009
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4Mvc;
namespace Magenic.BadgeApplication.Controllers
{
    public partial class BadgeManagerController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public BadgeManagerController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected BadgeManagerController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddBadgePost()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddBadgePost);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> EditBadge()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditBadge);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> EditBadgePost()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditBadgePost);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddMultipleActivities()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddMultipleActivities);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ApproveActivity()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveActivity);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> RejectActivity()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RejectActivity);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ApproveBadgeSubmission()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveBadgeSubmission);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> RejectBadgeSubmission()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RejectBadgeSubmission);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DownloadImageTemplate()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DownloadImageTemplate);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public BadgeManagerController Actions { get { return Mvc.BadgeManager; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "BadgeManager";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "BadgeManager";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string ManageActivities = "ManageActivities";
            public readonly string AddBadge = "AddBadge";
            public readonly string AddBadgePost = "AddBadgePost";
            public readonly string EditBadge = "EditBadge";
            public readonly string EditBadgePost = "EditBadgePost";
            public readonly string ApproveCommunityBadges = "ApproveCommunityBadges";
            public readonly string ApproveCommunityBadgesList = "ApproveCommunityBadgesList";
            public readonly string ApproveActivities = "ApproveActivities";
            public readonly string ApproveActivitiesList = "ApproveActivitiesList";
            public readonly string MultipleActivities = "MultipleActivities";
            public readonly string AddMultipleActivities = "AddMultipleActivities";
            public readonly string ApproveActivity = "ApproveActivity";
            public readonly string RejectActivity = "RejectActivity";
            public readonly string ApproveBadgeSubmission = "ApproveBadgeSubmission";
            public readonly string RejectBadgeSubmission = "RejectBadgeSubmission";
            public readonly string DownloadImageTemplate = "DownloadImageTemplate";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string ManageActivities = "ManageActivities";
            public const string AddBadge = "AddBadge";
            public const string AddBadgePost = "AddBadgePost";
            public const string EditBadge = "EditBadge";
            public const string EditBadgePost = "EditBadgePost";
            public const string ApproveCommunityBadges = "ApproveCommunityBadges";
            public const string ApproveCommunityBadgesList = "ApproveCommunityBadgesList";
            public const string ApproveActivities = "ApproveActivities";
            public const string ApproveActivitiesList = "ApproveActivitiesList";
            public const string MultipleActivities = "MultipleActivities";
            public const string AddMultipleActivities = "AddMultipleActivities";
            public const string ApproveActivity = "ApproveActivity";
            public const string RejectActivity = "RejectActivity";
            public const string ApproveBadgeSubmission = "ApproveBadgeSubmission";
            public const string RejectBadgeSubmission = "RejectBadgeSubmission";
            public const string DownloadImageTemplate = "DownloadImageTemplate";
        }


        static readonly ActionParamsClass_AddBadgePost s_params_AddBadgePost = new ActionParamsClass_AddBadgePost();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddBadgePost AddBadgePostParams { get { return s_params_AddBadgePost; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddBadgePost
        {
            public readonly string badgeEditViewModel = "badgeEditViewModel";
            public readonly string badgeImage = "badgeImage";
        }
        static readonly ActionParamsClass_EditBadge s_params_EditBadge = new ActionParamsClass_EditBadge();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditBadge EditBadgeParams { get { return s_params_EditBadge; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditBadge
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_EditBadgePost s_params_EditBadgePost = new ActionParamsClass_EditBadgePost();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditBadgePost EditBadgePostParams { get { return s_params_EditBadgePost; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditBadgePost
        {
            public readonly string id = "id";
            public readonly string badgeEditViewModel = "badgeEditViewModel";
            public readonly string badgeImage = "badgeImage";
        }
        static readonly ActionParamsClass_AddMultipleActivities s_params_AddMultipleActivities = new ActionParamsClass_AddMultipleActivities();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddMultipleActivities AddMultipleActivitiesParams { get { return s_params_AddMultipleActivities; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddMultipleActivities
        {
            public readonly string multipleActivityViewModel = "multipleActivityViewModel";
        }
        static readonly ActionParamsClass_ApproveActivity s_params_ApproveActivity = new ActionParamsClass_ApproveActivity();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ApproveActivity ApproveActivityParams { get { return s_params_ApproveActivity; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ApproveActivity
        {
            public readonly string submissionId = "submissionId";
        }
        static readonly ActionParamsClass_RejectActivity s_params_RejectActivity = new ActionParamsClass_RejectActivity();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RejectActivity RejectActivityParams { get { return s_params_RejectActivity; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RejectActivity
        {
            public readonly string submissionId = "submissionId";
        }
        static readonly ActionParamsClass_ApproveBadgeSubmission s_params_ApproveBadgeSubmission = new ActionParamsClass_ApproveBadgeSubmission();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ApproveBadgeSubmission ApproveBadgeSubmissionParams { get { return s_params_ApproveBadgeSubmission; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ApproveBadgeSubmission
        {
            public readonly string badgeId = "badgeId";
        }
        static readonly ActionParamsClass_RejectBadgeSubmission s_params_RejectBadgeSubmission = new ActionParamsClass_RejectBadgeSubmission();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RejectBadgeSubmission RejectBadgeSubmissionParams { get { return s_params_RejectBadgeSubmission; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RejectBadgeSubmission
        {
            public readonly string badgeId = "badgeId";
        }
        static readonly ActionParamsClass_DownloadImageTemplate s_params_DownloadImageTemplate = new ActionParamsClass_DownloadImageTemplate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DownloadImageTemplate DownloadImageTemplateParams { get { return s_params_DownloadImageTemplate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DownloadImageTemplate
        {
            public readonly string imageTemplatePath = "imageTemplatePath";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _ActivitiesForApproval = "_ActivitiesForApproval";
                public readonly string _AdminBadgeList = "_AdminBadgeList";
                public readonly string _BadgesForApproval = "_BadgesForApproval";
                public readonly string _EditBadgeItem = "_EditBadgeItem";
                public readonly string _PossibleBadgeList = "_PossibleBadgeList";
                public readonly string _PossibleBadgeWindow = "_PossibleBadgeWindow";
                public readonly string AddBadge = "AddBadge";
                public readonly string ApproveActivities = "ApproveActivities";
                public readonly string ApproveCommunityBadges = "ApproveCommunityBadges";
                public readonly string EditBadge = "EditBadge";
                public readonly string Index = "Index";
                public readonly string ManageActivities = "ManageActivities";
                public readonly string MultipleActivities = "MultipleActivities";
            }
            public readonly string _ActivitiesForApproval = "~/Views/BadgeManager/_ActivitiesForApproval.cshtml";
            public readonly string _AdminBadgeList = "~/Views/BadgeManager/_AdminBadgeList.cshtml";
            public readonly string _BadgesForApproval = "~/Views/BadgeManager/_BadgesForApproval.cshtml";
            public readonly string _EditBadgeItem = "~/Views/BadgeManager/_EditBadgeItem.cshtml";
            public readonly string _PossibleBadgeList = "~/Views/BadgeManager/_PossibleBadgeList.cshtml";
            public readonly string _PossibleBadgeWindow = "~/Views/BadgeManager/_PossibleBadgeWindow.cshtml";
            public readonly string AddBadge = "~/Views/BadgeManager/AddBadge.cshtml";
            public readonly string ApproveActivities = "~/Views/BadgeManager/ApproveActivities.cshtml";
            public readonly string ApproveCommunityBadges = "~/Views/BadgeManager/ApproveCommunityBadges.cshtml";
            public readonly string EditBadge = "~/Views/BadgeManager/EditBadge.cshtml";
            public readonly string Index = "~/Views/BadgeManager/Index.cshtml";
            public readonly string ManageActivities = "~/Views/BadgeManager/ManageActivities.cshtml";
            public readonly string MultipleActivities = "~/Views/BadgeManager/MultipleActivities.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_BadgeManagerController : Magenic.BadgeApplication.Controllers.BadgeManagerController
    {
        public T4MVC_BadgeManagerController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void ManageActivitiesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ManageActivities()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ManageActivities);
            ManageActivitiesOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void AddBadgeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddBadge()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddBadge);
            AddBadgeOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void AddBadgePostOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Magenic.BadgeApplication.Models.BadgeEditViewModel badgeEditViewModel, System.Web.HttpPostedFileBase badgeImage);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddBadgePost(Magenic.BadgeApplication.Models.BadgeEditViewModel badgeEditViewModel, System.Web.HttpPostedFileBase badgeImage)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddBadgePost);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "badgeEditViewModel", badgeEditViewModel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "badgeImage", badgeImage);
            AddBadgePostOverride(callInfo, badgeEditViewModel, badgeImage);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void EditBadgeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> EditBadge(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditBadge);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditBadgeOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void EditBadgePostOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, Magenic.BadgeApplication.Models.BadgeEditViewModel badgeEditViewModel, System.Web.HttpPostedFileBase badgeImage);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> EditBadgePost(int id, Magenic.BadgeApplication.Models.BadgeEditViewModel badgeEditViewModel, System.Web.HttpPostedFileBase badgeImage)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditBadgePost);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "badgeEditViewModel", badgeEditViewModel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "badgeImage", badgeImage);
            EditBadgePostOverride(callInfo, id, badgeEditViewModel, badgeImage);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void ApproveCommunityBadgesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ApproveCommunityBadges()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveCommunityBadges);
            ApproveCommunityBadgesOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void ApproveCommunityBadgesListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ApproveCommunityBadgesList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveCommunityBadgesList);
            ApproveCommunityBadgesListOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void ApproveActivitiesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ApproveActivities()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveActivities);
            ApproveActivitiesOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void ApproveActivitiesListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ApproveActivitiesList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveActivitiesList);
            ApproveActivitiesListOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void MultipleActivitiesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> MultipleActivities()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.MultipleActivities);
            MultipleActivitiesOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void AddMultipleActivitiesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Magenic.BadgeApplication.Models.MultipleActivityViewModel multipleActivityViewModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddMultipleActivities(Magenic.BadgeApplication.Models.MultipleActivityViewModel multipleActivityViewModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddMultipleActivities);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "multipleActivityViewModel", multipleActivityViewModel);
            AddMultipleActivitiesOverride(callInfo, multipleActivityViewModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void ApproveActivityOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int submissionId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ApproveActivity(int submissionId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveActivity);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "submissionId", submissionId);
            ApproveActivityOverride(callInfo, submissionId);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void RejectActivityOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int submissionId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> RejectActivity(int submissionId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RejectActivity);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "submissionId", submissionId);
            RejectActivityOverride(callInfo, submissionId);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void ApproveBadgeSubmissionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int badgeId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ApproveBadgeSubmission(int badgeId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveBadgeSubmission);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "badgeId", badgeId);
            ApproveBadgeSubmissionOverride(callInfo, badgeId);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void RejectBadgeSubmissionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int badgeId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> RejectBadgeSubmission(int badgeId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RejectBadgeSubmission);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "badgeId", badgeId);
            RejectBadgeSubmissionOverride(callInfo, badgeId);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void DownloadImageTemplateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string imageTemplatePath);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DownloadImageTemplate(string imageTemplatePath)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DownloadImageTemplate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "imageTemplatePath", imageTemplatePath);
            DownloadImageTemplateOverride(callInfo, imageTemplatePath);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009
